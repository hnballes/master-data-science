library(tidyverse)
install_cran(ggplot2movies)
install_cran("ggplot2movies")
install.packages("ggplot2movies")
library(ggplot2movies)
library("ggplot2movies")
install.packages("devtools")
library(devtools)
install.packages("usethis")
install.packages("usethis")
library(devtools)
install.packages("devtools")
install.packages("devtools")
library(devtools)
library(usethis)
library(devtools)
install.packages("rvest")
install.packages("janitor")
library(janitor)
library(rvest)
setwd("~/shared/estasdistica R/Ejercicios")
library(help = "stats")
library("stats")
library(stats4)
library(MASS)
library("stats")
library(stats4)
ajuste.normal<-fitdistr(datos$x,"normal")
ajuste.normal   #da los estimadores junto con los errores estandarme
mean(datos$x)
sd(datos$x)
mu<-ajuste.normal$estimate[1]            #asignacion de parametros
sigma<-ajuste.normal$estimate[2]
mu
sigma
###########ESTIMADORES PUNTUALES Y POR INTERVALOS DE CONFIANZa
datos<-read.table("datos_eje4.txt", header = TRUE)
datos
ajuste.normal<-fitdistr(datos$x,"normal")
ajuste.normal   #da los estimadores junto con los errores estandarme
mean(datos$x)
sd(datos$x)
mu<-ajuste.normal$estimate[1]            #asignacion de parametros
sigma<-ajuste.normal$estimate[2]
mu
sigma
modelo<-rnorm(100, mean = mu, sd = sigma)
modelo
qqplot(datos$x,  modelo, labels=FALSE)
qqnorm(datos$x)
ci<-mean(datos$x)-qnorm(0.975,0,1)*sd(datos$x)/sqrt(100) #cota inferior conf=95% var conocida
cs<-mean(datos$x)+qnorm(0.975,0,1)*sd(datos$x)/sqrt(100) #cota superior conf=95% var conocida
c(ci,cs)
#p-valor
t.test(x= datos$x, y=modelo, alternative = "greater", mu = 0) #si no ponemos alternative, por defecto lo har? a 2 colas
t.test(x= datos$x, y=modelo, mu = 0)
