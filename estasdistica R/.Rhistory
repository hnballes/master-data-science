library(tidyverse)
install_cran(ggplot2movies)
install_cran("ggplot2movies")
install.packages("ggplot2movies")
library(ggplot2movies)
library("ggplot2movies")
install.packages("devtools")
library(devtools)
install.packages("usethis")
install.packages("usethis")
library(devtools)
install.packages("devtools")
install.packages("devtools")
library(devtools)
library(usethis)
library(devtools)
install.packages("rvest")
install.packages("janitor")
library(janitor)
library(rvest)
setwd("~/shared/estasdistica R")
getwd()
datos<- read.table("datos_eje1.txt", header = TRUE) #CARGAMOS LOS DATOS
datos<- read.table("Ejercicios/datos_eje1.txt", header = TRUE) #CARGAMOS LOS DATOS
view(datos)
View(datos)
#Calculamos las frecuencias absolutas usamos la funci?n table()
absolutas <- table(datos$Calificacion)
absolutas
#Calculamos las frecuencias relativas usamos la funcion prop.table() "note que primero se deben calcular las frecuencias absolutas"
relativas <- prop.table(absolutas)
relativas
#DIAGRAMAS DE BARRAS PARA CALIFICACION barplot()
barplot(absolutas, col=rainbow(4),xlab="Calificaciones",ylab="Frecuencias absolutas")
#DIAGRAMAS DE BARRAS PARA SEXO barplot()
barplot(table(datos$Sexo), col=rainbow(2),xlab="Sexo",ylab="Frecuencias absolutas")
#DIAGRAMA DE SECTORES PARA CALIFICACION
pie(absolutas, col =rainbow(4))
#HISTOGRAMA PARA LA VARIABLE EDAD
hist(datos$Edad,col = "lightblue",xlab = "Edades", ylab = "Frecuencia", main = "Histograma para Edad")
#GRAFICO BOXPLOT
boxplot(datos$Edad, range = 1.5)
boxplot(formula = Edad ~ Calificacion, data =  datos)
#Medidas de posici?n
summary(datos$Puntuacion)
#cuartiles
quantile(datos$Puntuacion, probs = c(0,0.25,0.50, 0.75,1))
#mediana
median(datos$Puntuacion)
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
Mode(datos$Edad)
getmode(datos$Edad)
#ORDENAR DATOS
#DECRECIENTE
sort(datos$Edad, decreasing = FALSE)
#CRECIENTE
sort(datos$Edad, decreasing = TRUE)
M<-max(datos$Puntuacion)
m<-min(datos$Puntuacion)
R<- M-m
R
#varianza
V<-var(datos$Edad, y=NULL, na.rm = FALSE)
s<-sd(datos$Edad, na.rm = TRUE)
V
s
#Coeficiente de variaci?n
media<-mean(datos$Edad)
CV_Edad <- s/media
CV_Edad
install.packages("e1071")   # Es necesario si a?n no se ha instalado
library(e1071)
skewness(datos$Edad)
kurtosis(datos$Edad) #comparar con el histograma de las frecuencias absolutas de Edad
library(help = "stats")
library("stats")
library(stats4)
#################################################
##############################################
#DADO
dadoBueno=sample(c('1','2','3','4','5','6'), 100, replace = TRUE);
table(dadoBueno);
dadoBueno
barplot(table(dadoBueno))
dadoTrucoNum=sample(c(1:6), 1000, replace = TRUE,prob = c(2,3,1,9,8,14))
table(dadoTrucoNum);
dadoTrucoNum
barplot(table(dadoTrucoNum))
summary(table(dadoTrucoNum))
################################################
#Variable discreta
estado_informe<-c(1,2,1,2,2,2,3,3,1,4,2,2,2,3,1,4,3,2,1,1,1)
table(estado_informe)
estado_informe<-factor(estado_informe, labels=c("correcto","salvedades1","salvedades2","incorrecto"))
table(estado_informe)
prop.table(table(estado_informe))
round(100*prop.table(table(estado_informe)),1)
barplot(table(estado_informe))
barplot(table(estado_informe),col=c("blue","grey","brown","green"),main="Informe Auditoria")
dbinom(2,size=10,prob=0.2) #Probabilidad que una binomial(10,0.2) tome el valor 2 es,
pbinom(2,size=10,prob=0.2) #Probabilidad que una binomial(10,0.2) tome un valor inferior a 2
qbinom(0.9,size=10,prob=0.2) # que valor de una binomial(10,0.2) presenta una probabilidad acumulada de 0.9 ?
rbinom(2000,size=10,prob=0.2) # generar 2000 valores aleatorios de una distribucion binomial(10,0.2)
#Normal
a<-rnorm(1000, mean = 0, sd = 1)
hist(a)
boxplot(a)
stem(a)
summary(a)
mean(a);
sd(a);
var(a);
quantile(a, probs = seq(0, 1, 0.25))
quantile(a, probs = c(0.1, 0.5, 1))
par(mfrow=c(1,1))      # un solo gr?fico por ventana: la opción por defecto
par(mfrow=c(2,1))      # Dibuja una matriz de gráficos 2x1: un gráfico debajo de otro
par(mfrow=c(2,3))      # Matriz de gr?ficos 2 x 3 : dos filas por tres columnas
x = rnorm(200)          # Se generan 200 valores de una normal estandarizada
par(mfrow=c(2,2))      # Se crea una matriz de gr?ficos 2 x 2
plot(x)                # Dibujo de x frente al ?ndice 1 a 200
x = rnorm(200)          # Se generan 200 valores de una normal estandarizada
par(mfrow=c(2,2))      # Se crea una matriz de gr?ficos 2 x 2
plot(x)                # Dibujo de x frente al ?ndice 1 a 200
hist(x)              # Histograma de x
boxplot(x)             # Diagrama de caja de x
x = rnorm(200)          # Se generan 200 valores de una normal estandarizada
par(mfrow=c(2,2))      # Se crea una matriz de gr?ficos 2 x 2
plot(x)                # Dibujo de x frente al ?ndice 1 a 200
hist(x)              # Histograma de x
qqnorm(x)            # Gr?fico cuantil-cuantil de x frente a la distribuci?n
dev.off()
plot(x)                # Dibujo de x frente al ?ndice 1 a 200
hist(x)              # Histograma de x
par(mfrow=c(2,2))      # Se crea una matriz de gr?ficos 2 x 2
plot(x)                # Dibujo de x frente al ?ndice 1 a 200
hist(x)              # Histograma de x
plot(x)                # Dibujo de x frente al ?ndice 1 a 200
x = rnorm(200)          # Se generan 200 valores de una normal estandarizada
plot(x)                # Dibujo de x frente al ?ndice 1 a 200
hist(x)              # Histograma de x
boxplot(x)             # Diagrama de caja de x
x = rnorm(200)          # Se generan 200 valores de una normal estandarizada
par(mfrow=c(2,2))      # Se crea una matriz de gr?ficos 2 x 2
plot(x)                # Dibujo de x frente al ?ndice 1 a 200
hist(x)              # Histograma de x
boxplot(x)             # Diagrama de caja de x
qqnorm(x)            # Gr?fico cuantil-cuantil de x frente a la distribuci?n
dev.off()
library("stats")
library(stats4)
x = rnorm(200)          # Se generan 200 valores de una normal estandarizada
par(mfrow=c(2,2))      # Se crea una matriz de gr?ficos 2 x 2
plot(x)                # Dibujo de x frente al ?ndice 1 a 200
hist(x)              # Histograma de x
boxplot(x)             # Diagrama de caja de x
qqnorm(x)            # Gr?fico cuantil-cuantil de x frente a la distribuci?n
dev.off()
x = rnorm(100)          # Se generan 200 valores de una normal estandarizada
par(mfrow=c(2,2))      # Se crea una matriz de gr?ficos 2 x 2
plot(x)                # Dibujo de x frente al ?ndice 1 a 200
hist(x)              # Histograma de x
boxplot(x)             # Diagrama de caja de x
qqnorm(x)            # Gr?fico cuantil-cuantil de x frente a la distribuci?n
###########################################################
p<-c(0.01,0.025,0.05,0.10,0.9,0.95,0.975,0.99)
q<-c(-3,-2,-1,0,1,2,3)
x<-seq(from = -4, to =4, by =0.001)
pnorm(q, mean = 0, sd = 1, lower.tail = TRUE, log.p = FALSE) #####calculando probabilidades
qnorm(p, mean = 0, sd = 1, lower.tail = TRUE, log.p = FALSE)
##############GRAFICAMOS UNA FUNCION DE PROBABILIDAD DE LA NORMAL
b<-dnorm(x, mean = 0, sd = 1, log = FALSE)
plot(x,b,"l")
##############GRAFICAMOS UNA FUNCION DE PROBABILIDAD DE LA NORMAL
b<-dnorm(x, mean = 0, sd = 1, log = FALSE)
plot(x,b,"l")
#exp
x<-sort(rexp(100,2))
y<-dexp(x,2)
plot(x,y,"l")
##############################################
#Teorema Central Limite
TamanoMuestra=1000;NumMuestras=100;
muestra=array(0,c(TamanoMuestra,NumMuestras))
SumaMuestra=rep(0,TamanoMuestra)# Definir vector con 0's TamanoMuestra veces
for (i in 1:NumMuestras) {
muestra[,i]=runif(TamanoMuestra,2,4) #llenar columna i con num. aleat. unif.
SumaMuestra=SumaMuestra+muestra[,i]
}
hist(SumaMuestra)
qqnorm(SumaMuestra)
qqplot(SumaMuestra, dist= "norm", labels=FALSE)   #en el segundo argumento puedo poner otra distibuci?n te?rica
###########ESTIMADORES PUNTUALES Y POR INTERVALOS DE CONFIANZa
datos<-read.table("Ejercicios/datos_eje4.txt", header = TRUE)
library(MASS)
library("stats")
library(stats4)
###########ESTIMADORES PUNTUALES Y POR INTERVALOS DE CONFIANZa
datos<-read.table("Ejercicios/datos_eje4.txt", header = TRUE)
datos
#############
#estimacion parametros puntuales
ajuste.normal<-fitdistr(datos$x,"normal")
ajuste.normal   #da los estimadores junto con los errores estandarme
mean(datos$x)
sd(datos$x)
mu<-ajuste.normal$estimate[1]            #asignacion de parametros
sigma<-ajuste.normal$estimate[2]
mu
sigma
modelo<-rnorm(100, mean = mu, sd = sigma)
modelo
qqplot(datos$x,  modelo, labels=FALSE)
qqnorm(datos$x)
modelo<-rnorm(70, mean = mu, sd = sigma)
modelo
qqplot(datos$x,  modelo, labels=FALSE)
qqnorm(datos$x)
